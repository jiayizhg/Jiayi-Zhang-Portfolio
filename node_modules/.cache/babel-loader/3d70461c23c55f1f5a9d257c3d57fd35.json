{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(_x, _x2, _x3) {\n  var _again = true;\n\n  _function: while (_again) {\n    var object = _x,\n        property = _x2,\n        receiver = _x3;\n    desc = parent = getter = undefined;\n    _again = false;\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        _x = parent;\n        _x2 = property;\n        _x3 = receiver;\n        _again = true;\n        continue _function;\n      }\n    } else if ('value' in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _React$PropTypes = _react2['default'].PropTypes;\nvar bool = _React$PropTypes.bool;\nvar object = _React$PropTypes.object;\nvar string = _React$PropTypes.string;\nvar func = _React$PropTypes.func;\nvar oneOfType = _React$PropTypes.oneOfType;\nvar arrayOf = _React$PropTypes.arrayOf;\n\nfunction isLeftClickEvent(event) {\n  return event.button === 0;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nfunction isEmptyObject(object) {\n  for (var p in object) {\n    if (object.hasOwnProperty(p)) return false;\n  }\n\n  return true;\n}\n/**\n * A <Link> is used to create an <a> element that links to a route.\n * When that route is active, the link gets an \"active\" class name\n * (or the value of its `activeClassName` prop).\n *\n * For example, assuming you have the following route:\n *\n *   <Route path=\"/posts/:postID\" component={Post} />\n *\n * You could use the following component to link to that route:\n *\n *   <Link to={`/posts/${post.id}`} />\n *\n * Links may pass along location state and/or query string parameters\n * in the state/query props, respectively.\n *\n *   <Link ... query={{ show: true }} state={{ the: 'state' }} />\n *\n * This updated version of the link component adds two extra parameters:\n *\n * eventName\n * =========\n * This is the event that the component listens to.  It defaults to `onClick`,\n * but can be set to another event such as `onTouchTap` if you are using the\n * `react-tap-event-plugin` module to get around the iOS 300ms delay.\n * You can also pass an array of strings to listen to multiple events.\n *\n * historyType\n * ===========\n * This can be set to either `push`, `replace` or `back`.\n *\n * `push`: this adds the location to the history using `pushState`\n * `replace`: this replaces the top of the history using `replaceState`\n * `back`: this goes back to the previous history location in the stack.  If you use\n * this option you shouldn't specify a `to` parameter.\n */\n\n\nvar Link = function (_React$Component) {\n  _inherits(Link, _React$Component);\n\n  function Link() {\n    _classCallCheck(this, Link);\n\n    _get(Object.getPrototypeOf(Link.prototype), 'constructor', this).apply(this, arguments);\n  }\n\n  _createClass(Link, [{\n    key: 'handleClick',\n    value: function handleClick(event) {\n      var allowTransition = true,\n          clickResult = undefined;\n      if (this.props.onClick) clickResult = this.props.onClick(event);\n      if (isModifiedEvent(event)) return;\n      if (clickResult === false || event.defaultPrevented === true) allowTransition = false;\n      event.preventDefault();\n\n      if (allowTransition) {\n        if (this.props.historyType === 'push') {\n          this.context.history.pushState(this.props.state, this.props.to, this.props.query);\n        } else if (this.props.historyType === 'replace') {\n          this.context.history.replaceState(this.props.state, this.props.to, this.props.query);\n        } else if (this.props.historyType === 'back') {\n          this.context.history.goBack();\n        } else {\n          console.error('Only \\'push\\', \\'replace\\' and \\'back\\' are supported as historyTypes');\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this = this;\n\n      var history = this.context.history;\n      var _props = this.props;\n      var activeClassName = _props.activeClassName;\n      var activeStyle = _props.activeStyle;\n      var onlyActiveOnIndex = _props.onlyActiveOnIndex;\n      var to = _props.to;\n      var query = _props.query;\n      var state = _props.state;\n      var onClick = _props.onClick;\n      var eventName = _props.eventName;\n\n      var props = _objectWithoutProperties(_props, ['activeClassName', 'activeStyle', 'onlyActiveOnIndex', 'to', 'query', 'state', 'onClick', 'eventName']);\n\n      if (Object.prototype.toString.call(eventName) === '[object Array]') {\n        eventName.forEach(function (eventName) {\n          props[eventName] = _this.handleClick.bind(_this);\n        });\n      } else {\n        props[eventName] = this.handleClick.bind(this);\n      } // Ignore if rendered outside the context\n      // of history, simplifies unit testing.\n\n\n      if (history) {\n        if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {\n          if (history.isActive(to, query, onlyActiveOnIndex)) {\n            if (activeClassName) props.className += props.className === '' ? activeClassName : ' ' + activeClassName;\n            if (activeStyle) props.style = _extends({}, props.style, activeStyle);\n          }\n        }\n      }\n\n      return _react2['default'].createElement('a', props);\n    }\n  }], [{\n    key: 'contextTypes',\n    value: {\n      history: object\n    },\n    enumerable: true\n  }, {\n    key: 'propTypes',\n    value: {\n      activeStyle: object,\n      activeClassName: string,\n      onlyActiveOnIndex: bool.isRequired,\n      to: string,\n      query: object,\n      state: object,\n      onClick: func,\n      eventName: oneOfType([string, arrayOf(string)]),\n      historyType: string.isRequired\n    },\n    enumerable: true\n  }, {\n    key: 'defaultProps',\n    value: {\n      onlyActiveOnIndex: false,\n      className: '',\n      style: {},\n      eventName: 'onClick',\n      historyType: 'push'\n    },\n    enumerable: true\n  }]);\n\n  return Link;\n}(_react2['default'].Component);\n\nexports.Link = Link;","map":null,"metadata":{},"sourceType":"script"}